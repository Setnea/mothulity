#!/bin/bash
{% if run == "sbatch" or nodes > 1 %}
#SBATCH --job-name="{{job_name}}"
#SBATCH --partition={{partition}}
#SBATCH --nodes={{nodes}}
#SBATCH --ntasks-per-node={{ntasks_per_node}}
#SBATCH --mem-per-cpu={{mem_per_cpu}}
#SBATCH --exclude=gpu1,gpu2,gpu3,gpu4,gpu5,gpu6,gpu7,gpu8
  {% if node_list != None %}
#SBATCH --nodelist={{node_list}}
  {% endif %}
{% endif %}
###Gunzip if gzipped###
FASTQGZ_FILES="$(echo *fastq.gz)"
if [ FASTQGZ_FILES != '*fastq.gz' ]; then
  echo 'Compressed files found. Uncompressing...'
  gunzip ./*fastq.gz
fi
{% if manual_mode %}
{% else %}
###Create *files file###
mothulity_fc.py {{files_directory}} -o {{files_directory}}{{job_name}}.files
{% endif %}
{% if nodes > 1 %}
########################
# WARNING
# Mothur was invoked on multiple nodes.
# Please make sure it is the MPI-enabled version.
# Processors argument will be removed from within Mothur.
########################
###Sequence preprocessing###
srun mpirun mothur '#set.dir(input={{files_directory}}, output={{files_directory}});
{% else %}
###Sequence preprocessing###
mothur '#set.dir(input={{files_directory}}, output={{files_directory}});
  {% if manual_mode %}
set.current(processors={{processors}}, fasta={{fasta}}, group={{group}});
  {% else %}
set.current(processors={{processors}});
  {% endif %}
{% endif %}
{% if manual_mode %}
{% else %}
make.contigs(file={{job_name}}.files);
{% endif %}
summary.seqs(fasta=current);
{% if  min_length != None and max_length != None %}
screen.seqs(fasta=current, {% if manual_mode %}contigsreport={{job_name}}.contigs.report{% endif %}, group=current, maxambig={{max_ambig}}, maxhomop={{max_homop}}, minlength={{min_length}}, maxlength={{max_length}}, {% if manual_mode %}minoverlap={{min_overlap}}{% endif %});
{% elif min_length != None and max_length == None %}
screen.seqs(fasta=current, {% if manual_mode %}contigsreport={{job_name}}.contigs.report{% endif %}, group=current, maxambig={{max_ambig}}, maxhomop={{max_homop}}, minlength={{min_length}}, {% if manual_mode %}minoverlap={{min_overlap}}{% endif %}, optimize=end, criteria={{screen_criteria}});
{% elif min_length == None and max_length != None %}
screen.seqs(fasta=current, {% if manual_mode %}contigsreport={{job_name}}.contigs.report{% endif %}, group=current, maxambig={{max_ambig}}, maxhomop={{max_homop}}, maxlength={{max_length}}, {% if manual_mode %}minoverlap={{min_overlap}}{% endif %}, optimize=start, criteria={{screen_criteria}});
{% else %}
screen.seqs(fasta=current, {% if manual_mode %}contigsreport={{job_name}}.contigs.report{% endif %}, group=current, maxambig={{max_ambig}}, maxhomop={{max_homop}}, {% if manual_mode %}minoverlap={{min_overlap}}{% endif %}, optimize=start-end, criteria={{screen_criteria}});
{% endif %}
summary.seqs(fasta=current);
{% if classify_ITS == True %}
chop.seqs(fasta=current, group=current, numbases={{chop_length}});
{% endif %}
unique.seqs(fasta=current);
count.seqs(name=current, group=current);
{% if classify_ITS == True %}
{% else %}
align.seqs(fasta=current, reference={{align_database}});
summary.seqs(fasta=current, count=current);
screen.seqs(fasta=current, count=current, summary=current,  optimize=start-end, criteria={{screen_criteria}});
summary.seqs(fasta=current, count=current);
filter.seqs(fasta=current, vertical=T, trump=.);
unique.seqs(fasta=current, count=current);
{% endif %}
summary.seqs(fasta=current, count=current);
pre.cluster(fasta=current, count=current, diffs={{precluster_diffs}});
chimera.uchime(fasta=current, count=current, dereplicate={{chimera_dereplicate}});
remove.seqs(fasta=current, accnos=current);
summary.seqs(fasta=current, count=current);
classify.seqs(fasta=current, count=current, reference={{align_database}},
taxonomy={{taxonomy_database}}, cutoff={{classify_seqs_cutoff}});
{% if classify_ITS == True %}
remove.lineage(fasta=current, count=current, taxonomy=current,
taxon=Chloroplast-Mitochondria-unknown-Unknown);
pairwise.seqs(fasta=current, cutoff=0.15, output=lt);
  {% if full_ram_load == True %}
cluster(phylip=current, cutoff={{cluster_cutoff}});
  {% else %}
cluster.split(phylip=current, cutoff={{cluster_cutoff}}, large=T);
  {% endif %}
{% else %}
remove.lineage(fasta=current, count=current, taxonomy=current, taxon=Chloroplast-Mitochondria-Eukaryota-unknown-Unknown);
  {% if full_ram_load == True %}
dis.seqs(fasta=current, cutoff={{cluster_cutoff}});
cluster(column=current, count=current);
  {% else%}
cluster.split(fasta=current, count=current, taxonomy=current, cutoff={{cluster_cutoff}}, large=T);
  {% endif %}
{% endif %}
make.shared(list=current, count=current, label={{label}});
classify.otu(list=current, count=current, taxonomy=current, label={{label}});
count.groups(shared=current)'

{% if notify_email != None %}
###Send mail###
headnode_notifier.py {{notify_email}} --subject '{{job_name}} sequence preprocessing part has finished' --body 'Please login and inspect the results of {{job_name}}.'
{% else %}
{% endif %}
###Call mothulity for the analysis part###
{% if classify_ITS == True %}
mothulity.py {{files_directory}} -n analysis_{{job_name}} --output-dir {{output_dir}} --analysis-only --classify-ITS {% if run != None %}-r {{run}}{% endif %} {% if notify_email != None %}--notify-email {{notify_email}}{% endif %} {%if manual_mode %}--manual-mode --fasta {{fasta}} --group {{group}} --samples-number {{man_sampl_num}}{% endif %}
{% else %}
mothulity.py {{files_directory}} -n analysis_{{job_name}} --output-dir {{output_dir}} --analysis-only {% if run != None %}-r {{run}}{% endif %} {% if notify_email != None %}--notify-email {{notify_email}}{% endif %} {%if manual_mode %}--manual-mode --fasta {{fasta}} --group {{group}} --samples-number {{man_sampl_num}}{% endif %}
{% endif %}
